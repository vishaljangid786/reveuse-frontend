{"version":3,"file":"index.D_FKmv5n.js","sources":["../../node_modules/@emailjs/browser/es/models/EmailJSResponseStatus.js","../../node_modules/@emailjs/browser/es/utils/createWebStorage/createWebStorage.js","../../node_modules/@emailjs/browser/es/store/store.js","../../node_modules/@emailjs/browser/es/utils/buildOptions/buildOptions.js","../../node_modules/@emailjs/browser/es/api/sendPost.js","../../node_modules/@emailjs/browser/es/utils/validateParams/validateParams.js","../../node_modules/@emailjs/browser/es/utils/isHeadless/isHeadless.js","../../node_modules/@emailjs/browser/es/errors/headlessError/headlessError.js","../../node_modules/@emailjs/browser/es/utils/isBlockedValueInParams/isBlockedValueInParams.js","../../node_modules/@emailjs/browser/es/utils/validateBlockListParams/validateBlockListParams.js","../../node_modules/@emailjs/browser/es/errors/blockedEmailError/blockedEmailError.js","../../node_modules/@emailjs/browser/es/utils/isLimitRateHit/isLimitRateHit.js","../../node_modules/@emailjs/browser/es/utils/validateLimitRateParams/validateLimitRateParams.js","../../node_modules/@emailjs/browser/es/errors/limitRateError/limitRateError.js","../../node_modules/@emailjs/browser/es/index.js","../../node_modules/@emailjs/browser/es/methods/init/init.js","../../node_modules/@emailjs/browser/es/methods/send/send.js","../../node_modules/@emailjs/browser/es/utils/validateTemplateParams/validateTemplateParams.js","../../node_modules/@emailjs/browser/es/methods/sendForm/sendForm.js","../../node_modules/@emailjs/browser/es/utils/validateForm/validateForm.js"],"sourcesContent":["export class EmailJSResponseStatus {\n    constructor(_status = 0, _text = 'Network Error') {\n        this.status = _status;\n        this.text = _text;\n    }\n}\n","export const createWebStorage = () => {\n    if (typeof localStorage === 'undefined')\n        return;\n    return {\n        get: (key) => Promise.resolve(localStorage.getItem(key)),\n        set: (key, value) => Promise.resolve(localStorage.setItem(key, value)),\n        remove: (key) => Promise.resolve(localStorage.removeItem(key)),\n    };\n};\n","import { createWebStorage } from '../utils/createWebStorage/createWebStorage';\nexport const store = {\n    origin: 'https://api.emailjs.com',\n    blockHeadless: false,\n    storageProvider: createWebStorage(),\n};\n","export const buildOptions = (options) => {\n    if (!options)\n        return {};\n    // support compatibility with SDK v3\n    if (typeof options === 'string') {\n        return {\n            publicKey: options,\n        };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-base-to-string\n    if (options.toString() === '[object Object]') {\n        return options;\n    }\n    return {};\n};\n","import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = async (url, data, headers = {}) => {\n    const response = await fetch(store.origin + url, {\n        method: 'POST',\n        headers,\n        body: data,\n    });\n    const message = await response.text();\n    const responseStatus = new EmailJSResponseStatus(response.status, message);\n    if (response.ok) {\n        return responseStatus;\n    }\n    throw responseStatus;\n};\n","export const validateParams = (publicKey, serviceID, templateID) => {\n    if (!publicKey || typeof publicKey !== 'string') {\n        throw 'The public key is required. Visit https://dashboard.emailjs.com/admin/account';\n    }\n    if (!serviceID || typeof serviceID !== 'string') {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID || typeof templateID !== 'string') {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n};\n","export const isHeadless = (navigator) => {\n    return navigator.webdriver || !navigator.languages || navigator.languages.length === 0;\n};\n","import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const headlessError = () => {\n    return new EmailJSResponseStatus(451, 'Unavailable For Headless Browser');\n};\n","import { validateBlockListParams } from '../validateBlockListParams/validateBlockListParams';\nconst isBlockListDisabled = (options) => {\n    return !options.list?.length || !options.watchVariable;\n};\nconst getValue = (data, name) => {\n    return data instanceof FormData ? data.get(name) : data[name];\n};\nexport const isBlockedValueInParams = (options, params) => {\n    if (isBlockListDisabled(options))\n        return false;\n    validateBlockListParams(options.list, options.watchVariable);\n    const value = getValue(params, options.watchVariable);\n    if (typeof value !== 'string')\n        return false;\n    return options.list.includes(value);\n};\n","export const validateBlockListParams = (list, watchVariable) => {\n    if (!Array.isArray(list)) {\n        throw 'The BlockList list has to be an array';\n    }\n    if (typeof watchVariable !== 'string') {\n        throw 'The BlockList watchVariable has to be a string';\n    }\n};\n","import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const blockedEmailError = () => {\n    return new EmailJSResponseStatus(403, 'Forbidden');\n};\n","import { validateLimitRateParams } from '../validateLimitRateParams/validateLimitRateParams';\nconst getLeftTime = async (id, throttle, storage) => {\n    const lastTime = Number((await storage.get(id)) || 0);\n    return throttle - Date.now() + lastTime;\n};\nexport const isLimitRateHit = async (defaultID, options, storage) => {\n    if (!options.throttle || !storage) {\n        return false;\n    }\n    validateLimitRateParams(options.throttle, options.id);\n    const id = options.id || defaultID;\n    const leftTime = await getLeftTime(id, options.throttle, storage);\n    if (leftTime > 0) {\n        return true;\n    }\n    await storage.set(id, Date.now().toString());\n    return false;\n};\n","export const validateLimitRateParams = (throttle, id) => {\n    if (typeof throttle !== 'number' || throttle < 0) {\n        throw 'The LimitRate throttle has to be a positive number';\n    }\n    if (id && typeof id !== 'string') {\n        throw 'The LimitRate ID has to be a non-empty string';\n    }\n};\n","import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const limitRateError = () => {\n    return new EmailJSResponseStatus(429, 'Too Many Requests');\n};\n","import { EmailJSResponseStatus } from './models/EmailJSResponseStatus';\nimport { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm, EmailJSResponseStatus };\nexport default {\n    init,\n    send,\n    sendForm,\n    EmailJSResponseStatus,\n};\n","import { store } from '../../store/store';\nimport { buildOptions } from '../../utils/buildOptions/buildOptions';\n/**\n * EmailJS global SDK config\n * @param {object} options - the EmailJS global SDK config options\n * @param {string} origin - the non-default EmailJS origin\n */\nexport const init = (options, origin = 'https://api.emailjs.com') => {\n    if (!options)\n        return;\n    const opts = buildOptions(options);\n    store.publicKey = opts.publicKey;\n    store.blockHeadless = opts.blockHeadless;\n    store.storageProvider = opts.storageProvider;\n    store.blockList = opts.blockList;\n    store.limitRate = opts.limitRate;\n    store.origin = opts.origin || origin;\n};\n","import { store } from '../../store/store';\nimport { sendPost } from '../../api/sendPost';\nimport { buildOptions } from '../../utils/buildOptions/buildOptions';\nimport { validateParams } from '../../utils/validateParams/validateParams';\nimport { validateTemplateParams } from '../../utils/validateTemplateParams/validateTemplateParams';\nimport { isHeadless } from '../../utils/isHeadless/isHeadless';\nimport { headlessError } from '../../errors/headlessError/headlessError';\nimport { isBlockedValueInParams } from '../../utils/isBlockedValueInParams/isBlockedValueInParams';\nimport { blockedEmailError } from '../../errors/blockedEmailError/blockedEmailError';\nimport { isLimitRateHit } from '../../utils/isLimitRateHit/isLimitRateHit';\nimport { limitRateError } from '../../errors/limitRateError/limitRateError';\n/**\n * Send a template to the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {object} templateParams - the template params, what will be set to the EmailJS template\n * @param {object} options - the EmailJS SDK config options\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const send = async (serviceID, templateID, templateParams, options) => {\n    const opts = buildOptions(options);\n    const publicKey = opts.publicKey || store.publicKey;\n    const blockHeadless = opts.blockHeadless || store.blockHeadless;\n    const storageProvider = opts.storageProvider || store.storageProvider;\n    const blockList = { ...store.blockList, ...opts.blockList };\n    const limitRate = { ...store.limitRate, ...opts.limitRate };\n    if (blockHeadless && isHeadless(navigator)) {\n        return Promise.reject(headlessError());\n    }\n    validateParams(publicKey, serviceID, templateID);\n    validateTemplateParams(templateParams);\n    if (templateParams && isBlockedValueInParams(blockList, templateParams)) {\n        return Promise.reject(blockedEmailError());\n    }\n    if (await isLimitRateHit(location.pathname, limitRate, storageProvider)) {\n        return Promise.reject(limitRateError());\n    }\n    const params = {\n        lib_version: '4.4.1',\n        user_id: publicKey,\n        service_id: serviceID,\n        template_id: templateID,\n        template_params: templateParams,\n    };\n    return sendPost('/api/v1.0/email/send', JSON.stringify(params), {\n        'Content-type': 'application/json',\n    });\n};\n","export const validateTemplateParams = (templateParams) => {\n    // eslint-disable-next-line @typescript-eslint/no-base-to-string\n    if (templateParams && templateParams.toString() !== '[object Object]') {\n        throw 'The template params have to be the object. Visit https://www.emailjs.com/docs/sdk/send/';\n    }\n};\n","import { store } from '../../store/store';\nimport { sendPost } from '../../api/sendPost';\nimport { buildOptions } from '../../utils/buildOptions/buildOptions';\nimport { validateForm } from '../../utils/validateForm/validateForm';\nimport { validateParams } from '../../utils/validateParams/validateParams';\nimport { isHeadless } from '../../utils/isHeadless/isHeadless';\nimport { headlessError } from '../../errors/headlessError/headlessError';\nimport { isBlockedValueInParams } from '../../utils/isBlockedValueInParams/isBlockedValueInParams';\nimport { blockedEmailError } from '../../errors/blockedEmailError/blockedEmailError';\nimport { isLimitRateHit } from '../../utils/isLimitRateHit/isLimitRateHit';\nimport { limitRateError } from '../../errors/limitRateError/limitRateError';\nconst findHTMLForm = (form) => {\n    return typeof form === 'string' ? document.querySelector(form) : form;\n};\n/**\n * Send a form the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {string | HTMLFormElement} form - the form element or selector\n * @param {object} options - the EmailJS SDK config options\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const sendForm = async (serviceID, templateID, form, options) => {\n    const opts = buildOptions(options);\n    const publicKey = opts.publicKey || store.publicKey;\n    const blockHeadless = opts.blockHeadless || store.blockHeadless;\n    const storageProvider = store.storageProvider || opts.storageProvider;\n    const blockList = { ...store.blockList, ...opts.blockList };\n    const limitRate = { ...store.limitRate, ...opts.limitRate };\n    if (blockHeadless && isHeadless(navigator)) {\n        return Promise.reject(headlessError());\n    }\n    const currentForm = findHTMLForm(form);\n    validateParams(publicKey, serviceID, templateID);\n    validateForm(currentForm);\n    const formData = new FormData(currentForm);\n    if (isBlockedValueInParams(blockList, formData)) {\n        return Promise.reject(blockedEmailError());\n    }\n    if (await isLimitRateHit(location.pathname, limitRate, storageProvider)) {\n        return Promise.reject(limitRateError());\n    }\n    formData.append('lib_version', '4.4.1');\n    formData.append('service_id', serviceID);\n    formData.append('template_id', templateID);\n    formData.append('user_id', publicKey);\n    return sendPost('/api/v1.0/email/send-form', formData);\n};\n","export const validateForm = (form) => {\n    if (!form || form.nodeName !== 'FORM') {\n        throw 'The 3rd parameter is expected to be the HTML form element or the style selector of the form';\n    }\n};\n"],"names":["EmailJSResponseStatus","constructor","_status","_text","this","status","text","store","origin","blockHeadless","storageProvider","localStorage","get","key","Promise","resolve","getItem","set","value","setItem","remove","removeItem","createWebStorage","buildOptions","options","publicKey","toString","sendPost","async","url","data","headers","response","fetch","method","body","message","responseStatus","ok","validateParams","serviceID","templateID","isHeadless","navigator","webdriver","languages","length","headlessError","isBlockedValueInParams","params","list","watchVariable","isBlockListDisabled","Array","isArray","validateBlockListParams","name","FormData","includes","blockedEmailError","isLimitRateHit","defaultID","storage","throttle","id","validateLimitRateParams","leftTime","lastTime","Number","Date","now","getLeftTime","limitRateError","emailjs","init","opts","blockList","limitRate","send","templateParams","reject","validateTemplateParams","location","pathname","lib_version","user_id","service_id","template_id","template_params","JSON","stringify","sendForm","form","currentForm","document","querySelector","findHTMLForm","nodeName","validateForm","formData","append"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]}